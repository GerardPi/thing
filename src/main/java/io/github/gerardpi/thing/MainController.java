package io.github.gerardpi.thing;

import io.github.gerardpi.thing.editor.EditorContext;
import io.github.gerardpi.thing.editor.EditorController;
import io.github.gerardpi.thing.logging.TextAreaLogAppender;
import io.github.gerardpi.thing.navigator.NavigatorContext;
import io.github.gerardpi.thing.navigator.NavigatorController;
import javafx.beans.binding.StringBinding;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ObservableValue;
import javafx.event.EventHandler;
import javafx.scene.control.Tab;
import javafx.scene.input.KeyEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.nio.file.Paths;
import java.util.List;

public class MainController implements EventHandler<KeyEvent> {
    private static final Logger LOG = LoggerFactory.getLogger(MainController.class);
    private final View view;
    private final SimpleObjectProperty<ContentContext> contextProperty;

    private final State state;

    private final CommandController commandController;

    public MainController() {
        this.state = new State();
        this.view = new View();
        this.contextProperty = new SimpleObjectProperty<>(new EmptyContext("none"));
        this.view.addKeyEventHandler(this);
        TextAreaLogAppender.configureLogger(view.getLog(), getClass());
        view.bindMode(state.modeProperty());
        bindCommandInputFocusChange(view, this);
        this.state.setCapsLockOn(Toolkit.getDefaultToolkit().getLockingKeyState(java.awt.event.KeyEvent.VK_CAPS_LOCK));
        this.commandController = new CommandController(this);
    }

    private static void bindCommandInputFocusChange(View view, MainController mainController) {
        view.getCommandInput().focusedProperty()
                .addListener((observable, oldValue, newValue) -> mainController.commandInputFocusChanged(oldValue, newValue));
    }

    private void commandInputFocusChanged(Boolean oldValue, Boolean newValue) {
        if (!newValue) {
            state.leaveCommandMode();
        }
    }

    public View getUi() {
        return view;
    }

    public void updateIndicators() {
        boolean isCapsLockOnNow = Toolkit.getDefaultToolkit().getLockingKeyState(java.awt.event.KeyEvent.VK_CAPS_LOCK);
        if (isCapsLockOnNow != state.isCapsLockOn()) {
            state.setCapsLockOn(isCapsLockOnNow);
            view.setCapsLockIndicatorOn(state.isCapsLockOn());
        }
    }

    public ObservableValue<String> contextProperty() {
        return new StringBinding() {
            @Override
            protected String computeValue() {
                return contextProperty.getName();
            }
        };
    }

    public void handle(KeyEvent event) {
        handle(new FnEvent(event.getSource() == view.getCommandInput(), event));
    }

    public void handle(FnEvent e) {
        if (e.isEscape()) {
            enterNormalMode();
        } else if (e.isEmulated()) {
            // Don't process it. It was generated by this controller.
        } else if (e.isFromCommandInput()) {
            handleCommandEvent(e);
        } else if (e.isSwitchToCommandMode()) {
            enterCommandMode();
        } else if (e.isKeyReleased()) {
            LOG.warn("Nothing to do for {} ({})", e, e.isConsumed() ? "cons" : "NOT cons");
        }
        updateIndicators();
    }

    private void handleCommandEvent(FnEvent e) {
        if (e.isEscape()) {
            state.enterNormalMode();
            clearCommandInput();
            //contentController.getSelectedContent().getUi().requestFocus();
        } else if (e.matchesKeyRelease(ViKeyDef.ENTER)) {
            switch (state.getMode()) {
                case COMMAND -> commandController.execute(view.getCommandInput().getText());
                case SEARCH_FORWARD -> LOG.info("nothing to do for {}", state.getMode());
                //contentController.searchAndSelect(mainUi.getCommandInput().getText());
                default -> LOG.info("Don't know what to do with mode match '{}'", state.getMode());
            }
        }
    }

    void addNewEditorPane() {
        EditorContext editorContext = new EditorContext();
        EditorController editorController = new EditorController(editorContext);
        addContentTab(editorController);
    }

    public void addNewFileNavigatorPane() {
        NavigatorContext context = new NavigatorContext(Paths.get("/"));
        NavigatorController navigatorController = new NavigatorController(context);
        addContentTab(navigatorController);
        LOG.info("addNewFileNavigatorPane '{}'");
    }

    void clearCommandInput() {
        view.getCommandInput().clear();
    }

    private void enterSearchForwardInputMode() {
        state.enterSearchForwardInputMode();
        view.focusToCommandInput();
    }

    private void addContentTab(ContentController<? extends ContentContext> controller) {
        view.getTabPane().getTabs().add(new Tab(controller.getContext().getName(), controller.getUi()));
    }

    private void enterCommandMode() {
        state.enterCommandMode();
        view.focusToCommandInput();
    }

    private void enterNormalMode() {
        state.enterNormalMode();
        view.getCommandInput().clear();
        view.focusToActiveTab();
    }

    public void clearLog() {
        view.getLog().clear();
    }


    public void executeAndLog(List<String> extracted) {
        LOG.info("executeAndLog '{}'", extracted);
    }

    public void executeAndImport(List<String> extracted) {
        LOG.info("executeAndImport '{}'", extracted);
    }

    public void setWrap(boolean wrap) {
        LOG.info("setWrap '{}'", wrap);
    }

}
